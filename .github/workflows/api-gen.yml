name: Update API Type definitions

on:
  schedule:
    # Every Monday at midnight UTC, update the API type definitions from staging backend
    - cron: '0 0 * * 1'
  workflow_dispatch:
    inputs:
      backend_url:
        description: 'Backend URL to fetch OpenAPI spec from (optional, defaults to staging)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install bun
        run: npm install -g bun

      - name: Install dependencies
        run: bun install

      - name: Set backend URL
        run: |
          if [ "${{ github.event.inputs.backend_url }}" != "" ]; then
            echo "NEXT_PUBLIC_BACKEND_URL=${{ github.event.inputs.backend_url }}" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-https://staging.comfyregistry.org}" >> $GITHUB_ENV
          fi

      - name: Check if API spec is accessible
        run: |
          echo "Checking API spec at: $NEXT_PUBLIC_BACKEND_URL/openapi"
          curl -f -s "$NEXT_PUBLIC_BACKEND_URL/openapi" > /dev/null || {
            echo "Error: Cannot access OpenAPI spec at $NEXT_PUBLIC_BACKEND_URL/openapi"
            exit 1
          }

      - name: Generate API types
        run: bun run orval

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet src/api/generated.ts; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in API types"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in API types"
            echo "### Changed files:"
            git diff --name-only src/api/generated.ts
            echo "### Change summary:"
            git diff --stat src/api/generated.ts
          fi

      - name: Check for existing API update PR
        if: steps.changes.outputs.has_changes == 'true'
        id: existing_pr
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:chore-update-comfy-api`,
              sort: 'created',
              direction: 'desc'
            });

            const existingPr = prs.length > 0 ? prs[0] : null;

            if (existingPr) {
              console.log(`Found existing PR #${existingPr.number}: ${existingPr.title}`);
              return JSON.stringify({
                exists: true,
                number: existingPr.number,
                url: existingPr.html_url
              });
            } else {
              console.log('No existing API update PR found');
              return JSON.stringify({ exists: false });
            }

      - name: Generate diff summary for PR
        if: steps.changes.outputs.has_changes == 'true'
        id: diff_summary
        run: |
          echo "DIFF_STATS<<EOF" >> $GITHUB_OUTPUT
          git diff --stat src/api/generated.ts >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "DIFF_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo "### 📋 Change Summary" >> $GITHUB_OUTPUT
          git log --oneline -1 >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📊 File Statistics" >> $GITHUB_OUTPUT
          git diff --stat src/api/generated.ts >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get current timestamp
        if: steps.changes.outputs.has_changes == 'true'
        id: timestamp
        run: echo "current=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT

      - name: Create or Update Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update API type definitions from upstream"
          title: "Chore: Update Comfy-API"
          body: |
            ## 🔄 Automated API Update

            This PR contains automatically generated changes to the API client based on the latest OpenAPI specification from the backend.

            **Source**: `${{ env.NEXT_PUBLIC_BACKEND_URL }}/openapi`
            **Trigger**: ${{ github.event_name }}
            **Generated**: ${{ github.run_id }}
            **Last Updated**: ${{ steps.timestamp.outputs.current }}

            ${{ steps.diff_summary.outputs.DIFF_SUMMARY }}

            ## ✅ Automated Checks
            - [x] OpenAPI spec successfully fetched
            - [x] API types generated without errors
            - [x] Changes detected and committed

            ## 🧪 Manual Test Plan
            - [ ] Verify the generated types compile correctly: `bun run build`
            - [ ] Run linting: `bun run lint`
            - [ ] Test critical API endpoints in development
            - [ ] Check for any breaking changes in method signatures

            ## 🔗 Related Links
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [OpenAPI Spec](${{ env.NEXT_PUBLIC_BACKEND_URL }}/openapi)

            ---
            🤖 Generated with [GitHub Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          branch: chore-update-comfy-api
          delete-branch: false
          draft: false
          labels: |
            api
            automated
            dependencies
            backend-sync

      - name: Validate generated code
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "🔍 Validating generated API types..."
          # Check if the generated file compiles
          bun run build || {
            echo "❌ Build failed after API generation"
            exit 1
          }
          
          # Run linting
          bun run lint || {
            echo "❌ Linting failed - running auto-fix"
            bun run fix || exit 1
          }
          
          echo "✅ Generated API types are valid"

      - name: Update PR with validation results
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.create_pr.outputs.pull-request-number }}' || null;
            const existingPrData = JSON.parse('${{ steps.existing_pr.outputs.result }}');
            const isUpdate = existingPrData.exists;
            
            if (prNumber) {
              const updateType = isUpdate ? '🔄 **Updated**' : '🆕 **Created**';
              const updateTime = new Date().toISOString();
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `## 🔍 Automated Validation Results
                
                ${updateType} - ${updateTime}
                
                ✅ **Build**: Generated types compile successfully  
                ✅ **Linting**: Code style validation passed  
                ✅ **Dependencies**: All imports resolved correctly  
                
                ${isUpdate ? '🔄 PR has been updated with the latest API changes!' : 'This PR is ready for review! 🚀'}
                
                **Workflow Run**: [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            }

      - name: Comment on success
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          EXISTING_PR=$(echo '${{ steps.existing_pr.outputs.result }}' | jq -r .exists)
          if [ "$EXISTING_PR" = "true" ]; then
            echo "✅ API update PR updated successfully"
            echo "🔄 Force-pushed to existing PR branch: chore-update-comfy-api"
          else
            echo "✅ API update PR created successfully"
            echo "🆕 New PR created on branch: chore-update-comfy-api"
          fi
          echo "🔗 PR #${{ steps.create_pr.outputs.pull-request-number }}"
          echo "🔗 URL: ${{ steps.create_pr.outputs.pull-request-url }}"

      - name: No changes message
        if: steps.changes.outputs.has_changes == 'false'
        run: echo "ℹ️ No API changes detected - skipping PR creation"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = "API Generation Workflow Failed";
            const body = `
            ❌ **API Type Generation Failed**
            
            **Run ID**: ${{ github.run_id }}
            **Backend URL**: ${{ env.NEXT_PUBLIC_BACKEND_URL }}
            **Trigger**: ${{ github.event_name }}
            
            Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            
            Common issues:
            - Backend API is unreachable
            - OpenAPI spec format has changed
            - Dependencies need updating
            `;
            
            // Create an issue for failed runs if it doesn't exist
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'api-generation-failure',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['api-generation-failure', 'automated', 'bug']
              });
            } else {
              // Update existing issue with new failure info
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                body: `🔄 **New Failure**: ${new Date().toISOString()}\n\n${body}`
              });
            }
